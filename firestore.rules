rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn() { return request.auth != null; }
    function isAdmin() {
      return signedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isOwner() {
      return signedIn() && resource.data.creatorId == request.auth.uid;
    }
    function validDate(d) { return d.matches('^\\d{4}-\\d{2}-\\d{2}$'); }
    function validSlot(s) { return s in ["morning","afternoon","evening"]; }

    match /users/{uid} {
      allow read: if signedIn() && (request.auth.uid == uid || isAdmin());
      allow list: if isAdmin();
      allow create: if signedIn() && request.auth.uid == uid;
      allow update: if signedIn() && (request.auth.uid == uid || isAdmin());
      allow delete: if isAdmin();
    }

    match /reservations/{resId} {
      allow read: if true;
      allow create: if signedIn()
        && (request.resource.data.creatorId == request.auth.uid || isAdmin())
        && validDate(request.resource.data.date)
        && validSlot(request.resource.data.slot);
      allow update, delete: if signedIn() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.creatorId || isAdmin());
    }

    // Contador de capacidade (se usar): escrito apenas por admin/Functions
    match /slotCaps/{date_slot} {
      allow read: if signedIn();
      allow write: if isAdmin();
    }

    // Histórico opcional (imutável)
    match /reservationHistory/{id} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update, delete: if false;
    }
  }
}
